name: Slack Commands

on:
  repository_dispatch:
    types: [slack-command]

jobs:
  run-tests:
    name: Run Tests from Slack
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install chromium
        
      - name: Create Report Directory
        run: |
          mkdir -p playwright-report/data
          echo "Current directory: $(pwd)"
          echo "Directory structure:"
          find . -type d | sort
          
      - name: Run Tests
        run: |
          if [ "${{ github.event.client_payload.command }}" = "regression" ]; then
            npx playwright test --reporter=json --reporter-json-output=playwright-report/data/test-results.json
          elif [ "${{ github.event.client_payload.command }}" = "smoke" ]; then
            npx playwright test --reporter=json --reporter-json-output=playwright-report/data/test-results.json
          elif [ "${{ github.event.client_payload.command }}" = "carrier" ]; then
            npx playwright test --reporter=json --reporter-json-output=playwright-report/data/test-results.json
          elif [ "${{ github.event.client_payload.command }}" = "return" ]; then
            npx playwright test --reporter=json --reporter-json-output=playwright-report/data/test-results.json
          elif [ "${{ github.event.client_payload.command }}" = "shipment" ]; then
            npx playwright test --reporter=json --reporter-json-output=playwright-report/data/test-results.json
          fi
        env:
          ENVIRONMENT: ${{ github.event.client_payload.environment }}
          BASE_URL: ${{ github.event.client_payload.environment == 'apollo' && 'https://apollo-k8s.parcelperform.com' || 'https://bruno.parcelperform.com' }}
          API_CLIENT_ID: ${{ github.event.client_payload.environment == 'apollo' && secrets.APOLLO_API_CLIENT_ID || secrets.BRUNO_API_CLIENT_ID }}
          API_CLIENT_SECRET: ${{ github.event.client_payload.environment == 'apollo' && secrets.APOLLO_API_CLIENT_SECRET || secrets.BRUNO_API_CLIENT_SECRET }}
          
      - name: Verify Test Results
        run: |
          echo "Checking for test results file..."
          if [ -f "playwright-report/data/test-results.json" ]; then
            echo "Test results file found!"
            echo "File contents:"
            cat playwright-report/data/test-results.json
          else
            echo "Test results file not found!"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            echo "playwright-report directory contents:"
            ls -la playwright-report/
            echo "playwright-report/data directory contents:"
            ls -la playwright-report/data/ || true
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: playwright-report/
          
      - name: Parse Test Results
        id: parse-results
        run: |
          node -e "
            const parseTestResults = require('./scripts/parse-test-results');
            const results = parseTestResults();
            if (results) {
              console.log('::set-output name=total::' + results.total);
              console.log('::set-output name=passed::' + results.passed);
              console.log('::set-output name=failed::' + results.failed);
              console.log('::set-output name=failed_tests::' + results.failedTests.join('\\n'));
            } else {
              console.log('::set-output name=total::0');
              console.log('::set-output name=passed::0');
              console.log('::set-output name=failed::0');
              console.log('::set-output name=failed_tests::No test results found');
            }
          "
          
      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ github.event.client_payload.channel_id }}
          slack-message: |
            *Test Results*
            ${{ steps.parse-results.outputs.total }} running test cases
            :white_check_mark: ${{ steps.parse-results.outputs.passed }} test cases
            :x: ${{ steps.parse-results.outputs.failed }} test cases
            ----------------------------------------
            ${{ steps.parse-results.outputs.failed }} test cases failed:
            ${{ steps.parse-results.outputs.failed_tests }}
            
            Environment: ${{ github.event.client_payload.environment }}
            Test Suite: ${{ github.event.client_payload.command }}
            Results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        continue-on-error: true
        id: slack-notification
        
      - name: Handle Slack Error
        if: always() && steps.slack-notification.outcome == 'failure'
        run: |
          echo "Slack notification failed. Please ensure the bot is added to the channel."
          echo "To add the bot to the channel, use: /invite @YourBotName" 